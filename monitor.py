import time
import requests
from bs4 import BeautifulSoup

class MonitorManager:
    def __init__(self, bot, auth):
        self.bot = bot
        self.auth = auth
        self.monitors = {}

    def command_monitor(self, message):
        user_id = str(message.from_user.id)
        if not self.auth.is_key_active(user_id):
            self.bot.send_message(message.chat.id, """‚ùå –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ö–ª—é—á,
–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–ª—é—á –Ω–∞–ø–∏—à–∏—Ç–µ –ú–µ–Ω–µ–¥–∂–µ—Ä—É üëâ@Meneger_PoiskIphone""")
            return
        msg = self.bot.send_message(message.chat.id, """–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ü–æ–∏—Å–∫ –≤–∞–º –Ω—É–∂–Ω–æ:
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ê–≤–∏—Ç–æ —Å –≤–∞—à–∏–º –ø–æ–∏—Å–∫–æ–º.
–î–ª—è —ç—Ç–æ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –∏–ª–∏ –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –æ—Ç–∫—Ä–æ–π—Ç–µ –ê–≤–∏—Ç–æ, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.

‚ÄºÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ê–≤–∏—Ç–æ. –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ –ª—é–±—É—é –±–æ–ª—å—à—É—é —Ü–µ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 100000000. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –±—É–¥–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏.

‚ÅâÔ∏è –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è –≤ –µ—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üëâ @Meneger_PoiskIphone""")
        self.bot.register_next_step_handler(msg, self._process_link)

    def loop(self):
        while True:
            for user_id in list(self.monitors):
                chat_id = self.monitors[user_id]["chat"]
                data = self._fetch_items(self.monitors[user_id]["url"])
                current_links = [item["link"] for item in data]
                new_items = [item for item in data if item["link"] not in self.monitors[user_id].get("last_ids", set())]
                for item in new_items:
                    title = item.get("title") or "–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ"
                    price = item.get("price")
                    link = item.get("link")
                    text = f"üîî –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {title}"
                    if price:
                        text += f" –∑–∞ {price}"
                    if link:
                        text += f"\n{link}"
                    self.bot.send_message(chat_id, text)
                if "last_ids" not in self.monitors[user_id]:
                    self.monitors[user_id]["last_ids"] = set()
                self.monitors[user_id]["last_ids"].update(current_links)
            time.sleep(300)

    def _process_link(self, message):
        user_id = str(message.from_user.id)
        url = message.text.strip()
        if not url:
            self.bot.send_message(message.chat.id, "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
            return
        if not url.startswith("http"):
            url = "https://" + url
        self.monitors[user_id] = {"chat": message.chat.id, "url": url, "last_ids": set()}
        try:
            items = self._fetch_items(url)
            initial_links = [item["link"] for item in items]
            self.monitors[user_id]["last_ids"] = set(initial_links)
            self.bot.send_message(message.chat.id, "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
        except Exception as e:
            self.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _fetch_items(self, url):
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers)
        if resp.status_code != 200:
            raise Exception(f"HTTP {resp.status_code}")
        soup = BeautifulSoup(resp.text, 'html.parser')
        items_data = []
        for item in soup.find_all(attrs={"data-marker": "item"}):
            title = ""
            price = ""
            link = ""
            a_tag = item.find('a')
            if a_tag:
                title = a_tag.get_text(strip=True)
                href = a_tag.get('href')
                if href:
                    link = "https://www.avito.ru" + href if href.startswith('/') else href
            price_tag = item.find(attrs={"data-marker": "item-price"})
            if price_tag:
                price = price_tag.get_text(strip=True)
            else:
                price_text = item.find(text=lambda t: t and '‚ÇΩ' in t)
                if price_text:
                    price = price_text.strip()
            items_data.append({"title": title, "price": price, "link": link})
        return items_data
